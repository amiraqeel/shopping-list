{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AddItemForm","props","React","useState","item","setItem","onSubmit","e","handleSubmit","preventDefault","class","className","type","onChange","target","value","placeholder","required","ItemList","listItems","data","map","val","id","onClick","removeItem","splice","indexOf","currentTarget","ReactDOM","render","StrictMode","ContactManager","document","getElementById","items","setItems","name","Boolean","window","location","hostname","match","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAGA,SAASA,EAAYC,GAAQ,IAAD,EACAC,IAAMC,SAAS,IADf,mBACjBC,EADiB,KACXC,EADW,KAaxB,OAAO,0BAAMC,SANb,SAAsBC,GAClBN,EAAMO,aAAaJ,GACnBC,EAAQ,IACRE,EAAEE,mBAIF,yBAAKC,MAAM,cACP,2BAAOC,UAAU,kCAAkCC,KAAK,OAAOC,SAZvE,SAAsBN,GAClBF,EAAQE,EAAEO,OAAOC,QAW0EA,MAAOX,EAAMY,YAAY,cAAcC,UAAQ,KAE1I,yBAAKP,MAAM,cACP,4BAAQC,UAAU,qCAAqCC,KAAK,UAA5D,SAKZ,SAASM,EAASjB,GACd,IAAMkB,EAAYlB,EAAMmB,KAAKC,KAAI,SAACC,GAAD,OAAS,yBAAKX,UAAU,YACrD,wBAAIA,UAAU,mBAAmBW,EAC7B,0BAAMC,GAAID,EAAKX,UAAU,8CAA8Ca,QAASC,GAAhF,8BAKR,SAASA,EAAWlB,GAChBN,EAAMmB,KAAKM,OAAOzB,EAAMmB,KAAKO,QAAQpB,EAAEqB,cAAcL,IAAK,GAC1DM,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAD,CAAgBZ,KAAMnB,EAAMmB,QAEhCa,SAASC,eAAe,SAIhC,OAAO,4BAAKf,GAGhB,SAASa,EAAe/B,GAAQ,IAAD,EACDC,IAAMC,SAASF,EAAMmB,MADpB,mBACpBe,EADoB,KACbC,EADa,KAO3B,OACI,6BACI,kBAACpC,EAAD,CAAaQ,aANrB,SAAiB6B,GACbD,EAAS,GAAD,mBAAKD,GAAL,CAAYE,QAMhB,kBAACnB,EAAD,CAAUE,KAAMe,KAKbH,QClDKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNb,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACY,EAAD,CAAKvB,KAHK,MAKZa,SAASC,eAAe,SDwHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.85710a53.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction AddItemForm(props) {\n    const [item, setItem] = React.useState('');\n\n    function handleChange(e) {\n        setItem(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        props.handleSubmit(item);\n        setItem('');\n        e.preventDefault();\n    }\n\n    return <form onSubmit={handleSubmit}>\n        <div class=\"form-group\">\n            <input className=\"form-control border border-dark\" type=\"text\" onChange={handleChange} value={item} placeholder=\"Add Item...\" required />\n        </div>\n        <div class=\"form-group\">\n            <button className=\"btn btn-block btn-dark text-center\" type=\"submit\">Add</button>\n        </div>\n    </form>;\n}\n\nfunction ItemList(props) {\n    const listItems = props.data.map((val) => <div className=\"clearfix\">\n        <li className=\"ml-n4 mt-2 pt-2\">{val}\n            <span id={val} className=\"text-danger float-right mt-1 material-icons\" onClick={removeItem}>\n                remove_circle_outline</span>\n        </li>\n    </div>);\n\n    function removeItem(e) {\n        props.data.splice(props.data.indexOf(e.currentTarget.id), 1);\n        ReactDOM.render(\n            <React.StrictMode>\n                <ContactManager data={props.data} />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n    }\n\n    return <ul>{listItems}</ul>;\n}\n\nfunction ContactManager(props) {\n    const [items, setItems] = React.useState(props.data);\n\n    function addItem(name) {\n        setItems([...items, name]);\n    }\n\n    return (\n        <div>\n            <AddItemForm handleSubmit={addItem} />\n            <ItemList data={items} />\n        </div>\n    );\n}\n\nexport default ContactManager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst items = [];\nReactDOM.render(\n  <React.StrictMode>\n    <App data={items}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}